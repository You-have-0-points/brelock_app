import 'package:brelock/di_injector.dart';
import 'package:brelock/domain/entities/password.dart';
import 'package:brelock/domain/entities/password_analytics.dart';
import 'package:brelock/domain/usecases/password_interactor.dart';
import 'package:uuid/uuid.dart';

class PasswordAnalyticsInteractor {
  final PasswordInteractor passwordInteractor;

  PasswordAnalyticsInteractor({required this.passwordInteractor});

  Future<PasswordAnalytics> generateAnalytics(UuidValue consumerId) async {
    try {
      print('üîç Starting analytics for consumer: $consumerId');
      final passwords = await passwordInteractor.getByIds((await folderInteractor.getById((await folderRepository.getByName("–û–±—â–µ–µ", current_consumer))!.id)).passwordsIds);
      print('üìä Found ${passwords.length} passwords to analyze');

      if (passwords.isEmpty) {
        print('‚ö†Ô∏è No passwords found for analytics');
        return _createEmptyAnalytics();
      }

      final analytics = _analyzePasswords(passwords);
      print('‚úÖ Analytics generated: ${analytics.totalPasswords} passwords analyzed');
      return analytics;
    } catch (e) {
      print('‚ùå Error in generateAnalytics: $e');
      return _createEmptyAnalytics();
    }
  }

  PasswordAnalytics _createEmptyAnalytics() {
    return PasswordAnalytics(
      id: UuidValue.fromString(Uuid().v4()),
      generatedAt: DateTime.now(),
      totalPasswords: 0,
      strongPasswords: 0,
      mediumPasswords: 0,
      weakPasswords: 0,
      averagePasswordLength: 0,
      reusedPasswordsCount: 0,
      oldPasswordsCount: 0,
      recommendations: [
        PasswordRecommendation(
          title: '–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª–∏',
          description: '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
          type: RecommendationType.WEAK_PASSWORD,
          affectedCount: 0,
          action: '–î–æ–±–∞–≤–∏—Ç—å',
        )
      ],
    );
  }

  PasswordAnalytics _analyzePasswords(List<Password> passwords) {
    print('üî¨ Analyzing ${passwords.length} passwords...');

    final total = passwords.length;
    int strong = 0, medium = 0, weak = 0;
    double totalLength = 0;

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    for (final password in passwords) {
      print('üîë Password: ${password.serviceName.name}, length: ${password.secret.length}');
    }

    final reused = _findReusedPasswords(passwords);
    final old = _findOldPasswords(passwords);

    final recommendations = <PasswordRecommendation>[];

    for (final password in passwords) {
      final strength = _calculatePasswordStrength(password.secret);
      totalLength += password.secret.length;

      switch (strength) {
        case PasswordStrength.STRONG:
          strong++;
          break;
        case PasswordStrength.MEDIUM:
          medium++;
          break;
        case PasswordStrength.WEAK:
          weak++;
          break;
      }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if (weak > 0) {
      recommendations.add(PasswordRecommendation(
        title: '–°–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏',
        description: '$weak –ø–∞—Ä–æ–ª–µ–π –∏–º–µ—é—Ç –Ω–∏–∑–∫—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å',
        type: RecommendationType.WEAK_PASSWORD,
        affectedCount: weak,
        action: '–£—Å–∏–ª–∏—Ç—å',
      ));
    }

    if (reused.isNotEmpty) {
      recommendations.add(PasswordRecommendation(
        title: '–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ä–æ–ª–∏',
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–æ–ª–∏',
        type: RecommendationType.REUSED_PASSWORD,
        affectedCount: reused.length,
        action: '–ò–∑–º–µ–Ω–∏—Ç—å',
      ));
    }

    if (old.isNotEmpty) {
      recommendations.add(PasswordRecommendation(
        title: '–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞—Ä–æ–ª–∏',
        description: '${old.length} –ø–∞—Ä–æ–ª–µ–π –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤',
        type: RecommendationType.OLD_PASSWORD,
        affectedCount: old.length,
        action: '–û–±–Ω–æ–≤–∏—Ç—å',
      ));
    }

    final shortPasswords = passwords.where((p) => p.secret.length < 8).length;
    if (shortPasswords > 0) {
      recommendations.add(PasswordRecommendation(
        title: '–ö–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—Ä–æ–ª–∏',
        description: '$shortPasswords –ø–∞—Ä–æ–ª–µ–π –∫–æ—Ä–æ—á–µ 8 —Å–∏–º–≤–æ–ª–æ–≤',
        type: RecommendationType.SHORT_PASSWORD,
        affectedCount: shortPasswords,
        action: '–£–¥–ª–∏–Ω–∏—Ç—å',
      ));
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é
    if (recommendations.isEmpty && total > 0) {
      recommendations.add(PasswordRecommendation(
        title: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
        description: '–í—Å–µ –≤–∞—à–∏ –ø–∞—Ä–æ–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        type: RecommendationType.WEAK_PASSWORD,
        affectedCount: 0,
        action: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!',
      ));
    }

    final analytics = PasswordAnalytics(
      id: UuidValue.fromString(Uuid().v4()),
      generatedAt: DateTime.now(),
      totalPasswords: total,
      strongPasswords: strong,
      mediumPasswords: medium,
      weakPasswords: weak,
      averagePasswordLength: total > 0 ? totalLength / total : 0,
      reusedPasswordsCount: reused.length,
      oldPasswordsCount: old.length,
      recommendations: recommendations,
    );

    print('üìà Analytics result: $strong strong, $medium medium, $weak weak');
    return analytics;
  }

  List<Password> _findReusedPasswords(List<Password> passwords) {
    final passwordMap = <String, List<Password>>{};
    for (final password in passwords) {
      passwordMap.putIfAbsent(password.secret, () => []).add(password);
    }
    return passwordMap.values.where((list) => list.length > 1).expand((list) => list).toList();
  }

  List<Password> _findOldPasswords(List<Password> passwords) {
    final sixMonthsAgo = DateTime.now().subtract(Duration(days: 180));
    return passwords.where((password) => password.updatedAt!.isBefore(sixMonthsAgo)).toList();
  }

  PasswordStrength _calculatePasswordStrength(String password) {
    if (password.isEmpty) return PasswordStrength.WEAK;

    int score = 0;

    // –î–ª–∏–Ω–∞
    if (password.length >= 12) score += 2;
    else if (password.length >= 8) score += 1;
    else return PasswordStrength.WEAK; // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π

    // –°–ª–æ–∂–Ω–æ—Å—Ç—å
    if (RegExp(r'[A-Z]').hasMatch(password)) score += 1;
    if (RegExp(r'[a-z]').hasMatch(password)) score += 1;
    if (RegExp(r'[0-9]').hasMatch(password)) score += 1;
    if (RegExp(r'[!@#$%^&*(),.?":{}|<>]').hasMatch(password)) score += 1;

    if (score >= 5) return PasswordStrength.STRONG;
    if (score >= 3) return PasswordStrength.MEDIUM;
    return PasswordStrength.WEAK;
  }
}

enum PasswordStrength {
  WEAK,
  MEDIUM,
  STRONG
}